import torch
import torch.utils.data.dataset
import torch.nn.modules
import torch.nn
import numpy as np
from torch.autograd import Variable
import torch.nn.functional as F
import matplotlib.pyplot as plt
import random
from Util import DataLoader

NUM_OF_TEST_SET=2000
NUM_OF_PARTY=5
PARTY_DATA=6000
NUM_OF_ALL_DATA=32561
NUM_OF_FEATURE=14#NOT including label.
#0 is no
#1 is yes

class Net(torch.nn.Module):
    def __init__(self,NF,NH1,NH2,NO):
        super(Net,self).__init__()
        self.layer1=torch.nn.Linear(NF,NH1)
        self.layer2=torch.nn.Linear(NH1,NH2)
        self.layer3=torch.nn.Linear(NH2,NO)
    def forward(self, input):
        x=F.relu(self.layer1(input))
        x=F.relu(self.layer2(x))
        res=torch.sigmoid(self.layer3(x))
        res=self.out(res)
        return res

class Party:
    def __init__(self,NF,NH1,NH2,NO):
        self.Data=[]
        self.NUMOFFEATURE=0
        self.NUMOFDATA=0
        self.Net=Net(NF,NH1,NH2,NO)
        self.Y=None
    def Update(self,mu,sigma,bad=False):
        self.NUMOFDATA=len(self.Data)
        self.NUMOFFEATURE=len(self.Data[0])-1
        #原数据0和1，变成-1和1
        for index,item in enumerate(self.Data):
            if item[-1]==0:
                self.Data[index][-1]=-1
        self.Y=Variable(torch.from_numpy(np.array([item[-1] for item in self.Data]).reshape(self.NUMOFDATA,1)).float())
        if not bad:
            self.Data=Variable(torch.from_numpy(np.array([item[:-1] for item in self.Data])).float())
        else:
            python_data=[]
            for item in self.Data:#line
                temp=[value+random.gauss(mu,sigma) for value in item[:-2]]
                temp.append(item[-2])
                python_data.append(temp)
            self.Data=np.array(python_data)
            self.Data = Variable(torch.from_numpy(self.Data)).float()


    def Train(self):
        optimizer=torch.optim.SGD(self.Net.parameters(),lr=0.1)
        LossFunction=torch.nn.SoftMarginLoss()

        loss_list=[]

        for i in range(300):
            prediction = self.Net(self.Data)
            loss = LossFunction(prediction, self.Y)

            last = loss.detach().numpy()
            loss_list.append(last)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

        return loss_list

    def ConvertFeature(self,feature):
        res=[]
        for item in feature:
            print(item)
            if item in self.GetClass:
                res.append(self.GetClass[item])
            else:return []
        return res

class Tester:
    def __init__(self):
        self.Data = []

        self.NUMOFFEATURE = 0
        self.NUMOFDATA = 0
    def Update(self):
        self.NUMOFDATA=len(self.Data)
        self.NUMOFFEATURE=len(self.Data[0])-1
        #print("self.NUM_OF_FEATURE is {}".format(self.NUMOFFEATURE))
        for index,item in enumerate(self.Data):
            if item[-1]==0:
                self.Data[index][-1]=-1
        self.Y=Variable(torch.from_numpy(np.array([item[-1] for item in self.Data]).reshape(self.NUMOFDATA,1)).float())
        self.Data=Variable(torch.from_numpy(np.array([item[:-1] for item in self.Data])).float())

    def Test(self,A):
        correct=0
        for data in self.Data:
            prediction =1 if A.Net(data)>0.5 else 0
            # print('prediction',prediction)

            if prediction==data[-1]:
                correct+=1
        return correct/len(self.Data)


def FiveGuysOneTime(who):
    loss=[]
    plt.figure()
    plt.title("Five Guys One Time")
    for i,p in enumerate(who):
        loss.append(p.Train())
        plt.subplot(2,3,i+1)
        plt.plot([num for num in range(len(loss[i]))],loss[i])
#        plt.ylim(0.6,0.8)
    plt.show()
def ShowError(who,tester):
    error=[]
    plt.figure()
    plt.title("error of everybody")
    for p in who:
        error.append(tester.Test(p))

    plt.bar([i+1 for i in range(len(error))],error)
    plt.ylim(0.694,0.697)
    plt.show()
    return error


if __name__=="__main__":

    file_path= r'data-source\adult.csv'

    losts=[]
    loader=DataLoader()
    loader.LoadData(file_path)
    loader.WashData()
    loader.ShowData(5)

    people = []
    plain=Party(14, 10, 9, 1)
    loader.AssignSpecificData(plain, 0, 10000)
    plain.Update(0,1)
    losts.append(plain.Train())
    people.append(plain)

    mu,sigma=0,1
    x=0
    for i in range(4):
        t=Party(14, 10, 9, 1)
        loader.AssignSpecificData(t, 0, 10000)
        t.Update(bad=True, mu=mu, sigma=sigma+x)
        x+=3
        losts.append(t.Train())
        people.append(t)

    plt.figure()
    for i in range(5):
        plt.subplot(2,3,i+1)
        plt.plot([i for i in range(len(losts[i]))],losts[i])

    plt.show()
    #run test
    tester = Tester()
    loader.AssignSpecificData(tester, 31000, 32000)
    tester.Update()


    accuracy=[]
    plt.figure()
    plt.title("Accuracy")
    for p in people:
        accuracy.append(tester.Test(p))

    plt.bar([i + 1 for i in range(len(people))], accuracy)
    print(accuracy)
    plt.ylim(0.89, 0.91)
    plt.show()



    exit(0)


